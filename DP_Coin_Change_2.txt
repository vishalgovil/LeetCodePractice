//https://leetcode.com/problems/coin-change-2/submissions/
class Solution {
public:
 // *********MEMOIZATION SOLUTION*************  
//     int f(vector<int>& coins, int n, int amount,vector<vector<int>> & dp)
//     {
//         if(n==0)
//         {
//             return(amount%coins[0]==0);
//         }
//         if(dp[n][amount]!=-1)
//         {
//             return dp[n][amount];
//         }
//         int nottake=f(coins,n-1,amount,dp);
//          int   take=0;
        
//         if(coins[n]<=amount)
//             take=f(coins,n,amount-coins[n],dp);
            
     
//         return dp[n][amount]=take+nottake;
        
//     }
//     int change(int amount, vector<int>& coins) {
        
      
//         int n = coins.size();
//           vector<vector<int>> dp(n,vector<int>(amount+1,-1));
//         return f(coins,n-1,amount,dp);
//     }
    
    int change(int amount, vector<int>& coins) {

        
//*********TABULATION******************        
//         int T=amount;
//      int n = coins.size();
//         vector<vector<int>> dp(n,vector<int>(amount+1,0));
//          for(int i=0;i<=T;i++){
//         if(i%coins[0]==0)
//             dp[0][i]=1;
//          }
        
        
//        for(int ind=1; ind<n;ind++){
//         for(int target=0;target<=T;target++){
//             long notTaken = dp[ind-1][target];
            
//             long taken = 0;
//             if(coins[ind]<=target)
//                 taken = dp[ind][target-coins[ind]];
                
//             dp[ind][target] = notTaken + taken;
//         }
//     }
    
//     return dp[n-1][T];
    
        //******* SPACE OPTIMIZATION**********
           int T=amount;
     int n = coins.size();
      
        vector<int>prev( T+1,0);
        vector<int>curr( T+1,0);
        
        
         for(int i=0;i<=T;i++){
        if(i%coins[0]==0)
            prev[i]=1;
         }
        
        
       for(int ind=1; ind<n;ind++){
        for(int target=0;target<=T;target++){
            long notTaken = prev[target];
            
            long taken = 0;
            if(coins[ind]<=target)
                taken = curr[target-coins[ind]];
                
            curr[target] = notTaken + taken;
        }
           prev=curr;
    }
    
    return prev[T];     
        
        
        
    }
    
    
};