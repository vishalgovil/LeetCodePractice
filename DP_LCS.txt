// https://leetcode.com/problems/longest-common-subsequence/submissions/
//***************** Memoization**********************
// class Solution {
// public:
    
//     int f(string &text1, string &text2, int ind1,int ind2,vector<vector<int>> &dp)
//     {
//         if(ind1<0 || ind2<0)
//             return 0;
//         if(dp[ind1][ind2]!=-1)
//             return dp[ind1][ind2];
//         if(text1[ind1]==text2[ind2])
//             return dp[ind1][ind2 ] = 1 + f(text1, text2, ind1-1,ind2-1,dp);
        
//           return   dp[ind1][ind2 ] =  0 + max(f(text1, text2, ind1-1,ind2,dp),f(text1, text2, ind1,ind2-1,dp));
//     }
//     int longestCommonSubsequence(string text1, string text2) {
        
//         int ind1= text1.length()-1;
//         int ind2= text2.length()-1;
        
//         vector<vector<int>> dp(ind1+1,vector<int>(ind2+1,-1));
//         return f(text1,text2,ind1,ind2,dp);
//     }
// };

class Solution {
public:
    
   
    int longestCommonSubsequence(string text1, string text2) {
        
    
          
          int n= text1.length();
          int m= text2.length();
           vector<vector<int>> dp(n+1,vector<int>(m+1,0));
          for(int i=0;i<=n;i++)
          {
           dp[i][0]=0;   
          }
        
        
          for(int j=0;j<=m;j++)
          {
              dp[0][j]=0;
          }
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
               if(text1[i-1]==text2[j-1])
               {
                   dp[i][j]=1+dp[i-1][j-1];
               }
                else
                {
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
          return dp[n][m];
        }
};


