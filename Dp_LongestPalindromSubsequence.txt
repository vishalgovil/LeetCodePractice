

//https://practice.geeksforgeeks.org/problems/longest-palindromic-subsequence-1612327878/1/#


class Solution{
  public:
   int longestCommonSubsequence(string text1, string text2) {
        
        int n=text1.length();
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        
        for(int i=0;i<=n;i++)
        {
            dp[i][0]=0;
        }
          
      
        for(int j=0;j<=n;j++)
        {
            dp[0][j]=0;
        }
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                
                if(text1[i-1]==text2[j-1])
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                
                else
                {
                    dp[i][j]=0+max(dp[i-1][j],dp[i][j-1]);
                }
                
            }
        }
        
        return dp[n][n];
        
          
        }
    int longestPalinSubseq(string A) {
        
        string B=A;
        int len = A.length();
    reverse(A.begin(),A.end());
    return longestCommonSubsequence(A,B);
    }
};

// { Driver Code Starts.

int32_t main()
{
    int t; cin >> t;
    while (t--)
    {
        string s; cin >> s;
        Solution ob;
        cout << ob.longestPalinSubseq(s) << endl;
    }
}
// Contributed By: Pranay Bansal
  // } Driver Code Ends